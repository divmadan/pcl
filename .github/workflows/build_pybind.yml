name: Build Pybind11

on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version  }}
      - name: Display python version
        run: python -c "import sys; print(sys.version)"

      # Install pip and packages
      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Upgrade setuptools and wheel
        run: pip install --upgrade setuptools wheel

      - name: Install CMake
        run: sudo apt-get install -y cmake

      - name: Install pcl
        run: sudo apt-get install -y libpcl-dev

      - name: Build pybind11 from source
        run: |
          pip install pytest
          mkdir pybind11_source && cd pybind11_source
          git clone https://github.com/pybind/pybind11.git && cd pybind11
          mkdir build && cd build
          cmake ..
          sudo make check -j 4
          sudo make install

      # Install clang and it's python inteface via apt
      - name: Add llvm keys
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main' | sudo tee -a /etc/apt/sources.list
          echo 'deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main' | sudo tee -a /etc/apt/sources.list
      - name: Install libclang and its python bindings
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-11-dev python3-clang-11

      # Add dist-package to path to enable apt installed python3-clang import
      - name: Add dist-packages to PYTHONPATH
        run: echo "::set-env name=PYTHONPATH::${PYTHON_PATH}:/usr/lib/python3/dist-packages"
      - name: Display PYTHONPATH
        run: python -c "import sys; print('\n'.join(sys.path))"

      # TODO: A more general build CI, not just for point_types.hpp

      # Temporary: Generate a compile_commands.json
      - name: Create a compilation database
        run: echo "[{\"directory\" ":" \"${GITHUB_WORKSPACE}/${_PYTHON_BINDINGS_PATH}\", \"command\" ":" \"clang++ -std=c++14 -I/usr/include/eigen3 ${GITHUB_WORKSPACE}/common/include/pcl/impl/point_types.hpp\", \"file\" ":" \"${GITHUB_WORKSPACE}/common/include/pcl/impl/point_types.hpp\"}]" > ${_PYTHON_BINDINGS_PATH}/compile_commands.json
        env:
          _PYTHON_BINDINGS_PATH: bindings/python

      # Parse
      - name: Parse point_types.hpp
        run: |
          cd ${_PYTHON_BINDINGS_PATH}
          python scripts/parse.py ${GITHUB_WORKSPACE}/common/include/pcl/impl/point_types.hpp
        env:
          _PYTHON_BINDINGS_PATH: bindings/python

      # Generate pybind code
      - name: Generate pybind code for point_types.hpp
        run: |
          cd ${_PYTHON_BINDINGS_PATH}
          python scripts/generate.py ${GITHUB_WORKSPACE}/${_PYTHON_BINDINGS_PATH}/json/common/include/pcl/impl/point_types.json
        env:
          _PYTHON_BINDINGS_PATH: bindings/python

      - name: Compile using CMake and setuptools
        # Hack to preserve the terminal output with color
        run: |
          cd ${_PYTHON_BINDINGS_PATH}
          python setup.py sdist bdist_wheel
        env:
          _PYTHON_BINDINGS_PATH: bindings/python
